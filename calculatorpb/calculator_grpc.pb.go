// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: calculatorpb/calculator.proto

package calculatorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalcularorClient is the client API for Calcularor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcularorClient interface {
	Add(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Result, error)
	Sub(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Result, error)
}

type calcularorClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcularorClient(cc grpc.ClientConnInterface) CalcularorClient {
	return &calcularorClient{cc}
}

func (c *calcularorClient) Add(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/calculator.Calcularor/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcularorClient) Sub(ctx context.Context, in *Params, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/calculator.Calcularor/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalcularorServer is the server API for Calcularor service.
// All implementations must embed UnimplementedCalcularorServer
// for forward compatibility
type CalcularorServer interface {
	Add(context.Context, *Params) (*Result, error)
	Sub(context.Context, *Params) (*Result, error)
	mustEmbedUnimplementedCalcularorServer()
}

// UnimplementedCalcularorServer must be embedded to have forward compatible implementations.
type UnimplementedCalcularorServer struct {
}

func (UnimplementedCalcularorServer) Add(context.Context, *Params) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCalcularorServer) Sub(context.Context, *Params) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (UnimplementedCalcularorServer) mustEmbedUnimplementedCalcularorServer() {}

// UnsafeCalcularorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcularorServer will
// result in compilation errors.
type UnsafeCalcularorServer interface {
	mustEmbedUnimplementedCalcularorServer()
}

func RegisterCalcularorServer(s grpc.ServiceRegistrar, srv CalcularorServer) {
	s.RegisterService(&Calcularor_ServiceDesc, srv)
}

func _Calcularor_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcularorServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calcularor/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcularorServer).Add(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calcularor_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Params)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcularorServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculator.Calcularor/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcularorServer).Sub(ctx, req.(*Params))
	}
	return interceptor(ctx, in, info, handler)
}

// Calcularor_ServiceDesc is the grpc.ServiceDesc for Calcularor service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calcularor_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calcularor",
	HandlerType: (*CalcularorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calcularor_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _Calcularor_Sub_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculatorpb/calculator.proto",
}
